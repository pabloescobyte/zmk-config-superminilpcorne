/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

// Custom layer definitions
#define MSGM 0
#define NAVI 1
#define NUMS 2
#define NUMK 3
#define ADJS 4

/ {

// Tap Dance
        behaviors {
            // single quote, colon, semicolon
            tdsqclsc: tap_dance_sqclsc {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_0";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp SQT>, <&kp COLON>, <&kp SEMI>;
            };
            // comma, double quote
            tdcmdq: tap_dance_cmdq {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_1";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp COMMA>, <&kp DQT>;
            };
            // period, dash
            tddtds: tap_dance_dtds {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_2";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp DOT>, <&kp MINUS>;
            };
            // forward slash, backslash
            tdfsbs: tap_dance_fsbs {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_3";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp FSLH>, <&kp BSLH>;
            };
            // underscore, tilde, backslash
            tdutbs: tap_dance_utbs {
                compatible = "zmk,behavior-tap-dance";
                label = "TAP_DANCE_4";
                #binding-cells = <0>;
                tapping-term-ms = <200>;
                bindings = <&kp UNDER>, <&kp TILDE>, <&kp BSLH>;
            };
            // double-tap LSHIFT to turn on CAPS WORD
            tdcaps: td_caps_word {
                compatible = "zmk,behavior-tap-dance";
                label = "CAPDANCE";
                #binding-cells = <0>;
                bindings = <&kp LSHFT>, <&caps_word>;
            };
        };

        combos {
            compatible = "zmk,combos";
            // TAB+Q = ESC
            esc {
                timeout-ms = <50>;
                key-positions = <0 1>;
                bindings = <&kp ESC>;
            };
            // OPBKSSP = DEL
            opbksp_del {
                timeout-ms = <50>;
                key-positions = <9 10 11>;
                bindings = <&kp DEL>;
            };

            // QW = CTRL+W
            ctrlw {
                timeout-ms = <50>;
                key-positions = <1 2>;
                bindings = <&kp LC(W)>;
            };
            // QE = ALT+F4
            qe_altf4 {
                timeout-ms = <50>;
                key-positions = <1 3>;
                bindings = <&kp LA(F4)>;
            };


            // DF = CTRL+TAB
            df_ctrltab {
                timeout-ms = <50>;
                key-positions = <15 16>;
                bindings = <&kp LC(TAB)>;
            };
            // DG = CTRL+SHIFT+TAB
            dg_ctrlshifttab {
                timeout-ms = <50>;
                key-positions = <15 17>;
                bindings = <&kp LC(LS(TAB))>;
            };

            // ZC = CTRL+DOT
            zc_ctrldot {
                timeout-ms = <50>;
                key-positions = <25 27>;
                bindings = <&kp LC(DOT)>;
            };

            // SHIFT+ZX = CTRL+Z
            shftzx_ctrlz {
                timeout-ms = <50>;
                key-positions = <24 25 26>;
                bindings = <&kp LC(Z)>;
            };

            // ZX = LEFTARROW
            zx_left {
                timeout-ms = <50>;
                key-positions = <25 26>;
                bindings = <&kp LEFT>;
            };
            // CV = RIGHTARROW
            cv_right {
                timeout-ms = <50>;
                key-positions = <27 28>;
                bindings = <&kp RIGHT>;
            };

            // SDF = UPARROW
            sdf_up {
                timeout-ms = <50>;
                key-positions = <14 15 16>;
                bindings = <&kp UP>;
            };
            // XCV = DOWNARROW
            xcv_down {
                timeout-ms = <50>;
                key-positions = <26 27 28>;
                bindings = <&kp DOWN>;
            };


            // WR = CTRL+HOME
            wr_ctrlhome {
                timeout-ms = <50>;
                key-positions = <2 4>;
                bindings = <&kp LC(HOME)>;
            };
            // SF = CTRL+END
            sf_ctrlend {
                timeout-ms = <50>;
                key-positions = <14 16>;
                bindings = <&kp LC(END)>;
            };

            // IOP = PLUS
            iop_plus {
                timeout-ms = <50>;
                key-positions = <8 9 10>;
                bindings = <&kp PLUS>;
            };
            // KL' = MINUS
            klsq_minus {
                timeout-ms = <50>;
                key-positions = <20 21 22>;
                bindings = <&kp MINUS>;
            };
            // ,./ = EQUALS
            cmdtfs_equal {
                timeout-ms = <50>;
                key-positions = <32 33 34>;
                bindings = <&kp EQUAL>;
            };


            // YU = {
            yu_lcb {
                timeout-ms = <50>;
                key-positions = <6 7>;
                bindings = <&kp LBRC>;
            };
            // IO = }
            io_rcb {
                timeout-ms = <50>;
                key-positions = <8 9>;
                bindings = <&kp RBRC>;
            };

            
            // HJ = [
            hj_lsb {
                timeout-ms = <50>;
                key-positions = <18 19>;
                bindings = <&kp LBKT>;
            };
            // KL = ]
            kl_rsb {
                timeout-ms = <50>;
                key-positions = <20 21>;
                bindings = <&kp RBKT>;
            };

            // NM = (
            nm_lpar {
                timeout-ms = <50>;
                key-positions = <30 31>;
                bindings = <&kp LPAR>;
            };
            // ,. = )
            ,._rpar {
                timeout-ms = <50>;
                key-positions = <32 33>;
                bindings = <&kp RPAR>;
            };
        };

        conditional_layers {
            compatible = "zmk,conditional-layers";

            // if activating NAVI and NUMS layers together, activate ADJS layer instead
            tri_layer {
                if-layers = <1 3>;
                then-layer = <4>;
            };
        };

        keymap {
                compatible = "zmk,keymap";

                msgm {
// -----------------------------------------------------------------------------------------
// |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
// | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  | ':; | ENTR |
// | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   | , " |  .  |  /  | _~\  |
//                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |
                        bindings = <
   &kp TAB   &kp Q &kp W &kp E &kp R &kp T   &kp Y &kp U  &kp I     &kp O   &kp P     &kp BSPC
   &kp LCTRL &kp A &kp S &kp D &kp F &kp G   &kp H &kp J  &kp K     &kp L   &tdsqclsc &kp RET
   &tdcaps   &kp Z &kp X &kp C &kp V &kp B   &kp N &kp M  &tdcmdq   &kp DOT &kp FSLH  &tdutbs
          &kp LALT &mo NAVI &lt NUMS SPACE   &kp SPACE &kp LGUI &mo NUMK
                        >;
                };
                navi {
// -----------------------------------------------------------------------------------------
// |     | HOME |  UP  |  END  | PGUP | SPC |   | VOLU | { | } | _ | + | DEL |
// |     | LEFT | DOWN | RIGHT | PGDN | ENT |   | VOLD | [ | ] | - | = |  ;  |
// |     | SHOM | SEND | COPY  | PAST | CUT |   | MUTE | ( | ) | < | > |  |  |
//                     |       |      |     |   |      |   |   |
                        bindings = <
   &trans &kp HOME     &kp UP      &kp END   &kp PG_UP &kp SPACE   &kp C_VOL_UP &kp LBRC  &kp RBRC &kp UNDER &kp PLUS  &kp DEL
   &trans &kp LEFT     &kp DOWN    &kp RIGHT &kp PG_DN &kp RET     &kp C_VOL_DN &kp LBKT  &kp RBKT &kp MINUS &kp EQUAL &kp SEMI
   &trans &kp LS(HOME) &kp LS(END) &kp LC(C) &kp LC(V) &kp LC(X)   &kp C_MUTE   &kp LPAR  &kp RPAR &kp LT    &kp GT    &kp PIPE
                                            &trans &trans &trans   &trans &trans &trans
                        >;
                };
                nums {
// -----------------------------------------------------------------------------------------
// |   |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  |  _  |
// | - |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | F12 |
// | ` |  F1 |  F2 |  F3 |  F4 |  F5 |   |  F6 |  F7 |  F8 |  F9 | F10 | F11 |
//                 |     |     |     |   |  .  |     |     |
                        bindings = <
   &trans    &kp EXCL &kp AT &kp HASH &kp DLLR &kp PRCNT   &kp CARET &kp AMPS &kp STAR &kp LPAR &kp RPAR &kp UNDER
   &kp MINUS &kp N1   &kp N2 &kp N3   &kp N4   &kp N5      &kp N6    &kp N7   &kp N8   &kp N9   &kp N0   &kp F12
   &kp GRAVE &kp F1   &kp F2 &kp F3   &kp F4   &kp F5      &kp F6    &kp F7   &kp F8   &kp F9   &kp F10  &kp F11
                                 &trans &trans &trans      &kp DOT &trans &trans
                        >;
                };
                numk {
// -----------------------------------------------------------------------------------------
// |  ESC |  /  |  7  |  8  |  9  |  -  |   |     |     |     |     |     |      |
// | BKSP |  *  |  4  |  5  |  6  |  +  |   |     |     |     |     |     |      |
// | NMLK | TAB |  1  |  2  |  3  | ENT |   |     |     |     |     |     |      |
//                    |  0  |  .  | ENT |   |     |     |     |
                        bindings = <
   &kp ESC    &kp KP_SLASH    &kp KP_N7 &kp KP_N8 &kp KP_N9 &kp KP_MINUS      &trans &trans &trans &trans &trans &trans
   &kp BSPC   &kp KP_ASTERISK &kp KP_N4 &kp KP_N5 &kp KP_N6 &kp KP_PLUS       &trans &trans &trans &trans &trans &trans
   &kp KP_NUM &kp TAB         &kp KP_N1 &kp KP_N2 &kp KP_N3 &kp KP_ENTER      &trans &trans &trans &trans &trans &trans
                                       &kp KP_N0 &kp KP_DOT &kp KP_ENTER      &trans &trans &trans
                        >;
                };
                adjs {
// -----------------------------------------------------------------------------------------
// |       |     |     |     |     |     |    |    | CAPS | INS | SLCK | PSCRN |    |
// |       | BT1 | BT2 | BT3 | BT4 | BT5 |    |    |      |     |      |       |    |
// | BTCLR |     |     |     |     |     |    |    |      |     |      |       |    |
//                           |     |     |    |    |      |     |
                        bindings = <
   &trans      &trans       &trans       &trans       &trans       &trans         &trans &kp CAPS &kp INS &kp SLCK &kp PSCRN &trans
   &trans      &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4   &trans &trans   &trans  &trans   &trans    &trans
   &bt BT_CLR  &trans       &trans       &trans       &trans       &trans         &trans &trans   &trans  &trans   &trans    &trans
                                                     &trans &trans &trans         &trans &trans &trans
                        >;
                };
        };
};

